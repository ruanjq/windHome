(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{246:function(e,t,v){"use strict";v.r(t);var _=v(2),a=Object(_.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"react-面试题-一"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#react-面试题-一"}},[e._v("#")]),e._v(" React 面试题(一)")]),e._v(" "),v("h2",{attrs:{id:"什么是react"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是react"}},[e._v("#")]),e._v(" 什么是React")]),e._v(" "),v("p",[v("code",[e._v("React")]),e._v(" 是一个用于构建用户界面的 "),v("code",[e._v("JavaScript")]),e._v(" 库,通过"),v("code",[e._v("JSX")]),e._v("语法声明式编程方式编写函数组件，")]),e._v(" "),v("h2",{attrs:{id:"react-生命周期"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#react-生命周期"}},[e._v("#")]),e._v(" React 生命周期")]),e._v(" "),v("p",[v("code",[e._v("React")]),e._v(" 生命周期分为三个阶段,"),v("code",[e._v("挂载阶段")]),e._v("，"),v("code",[e._v("更新阶段")]),e._v("，"),v("code",[e._v("卸载阶段")]),e._v("，"),v("code",[e._v("错误阶段")])]),e._v(" "),v("ul",[v("li",[e._v("挂载阶段："),v("code",[e._v("constructor")]),e._v("->"),v("code",[e._v("static getDerivedStateFromProps")]),e._v("->"),v("code",[e._v("render")]),e._v("->"),v("code",[e._v("componentDidMount")])]),e._v(" "),v("li",[e._v("更新阶段："),v("code",[e._v("static getDerivedStateFromProps")]),e._v("->"),v("code",[e._v("shouldComponentUpdate")]),e._v("->"),v("code",[e._v("render")]),e._v("->"),v("code",[e._v("getSnapshotBeforeUpdate")]),e._v("->"),v("code",[e._v("componentDidUpdate")])]),e._v(" "),v("li",[e._v("卸载阶段："),v("code",[e._v("componentWillUnMount")])]),e._v(" "),v("li",[e._v("错误阶段："),v("code",[e._v("static getDerivedStateFromError")]),e._v(","),v("code",[e._v("componentDidCatch")])])]),e._v(" "),v("p",[v("img",{attrs:{src:"/images/front/react.png",alt:"React 生命周期",title:"React 声明周期"}})]),e._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[e._v("参考以下文档")]),e._v(" "),v("p",[v("a",{attrs:{href:"http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/",target:"_blank",rel:"noopener noreferrer"}},[e._v("React生命周期"),v("OutboundLink")],1)])]),e._v(" "),v("h2",{attrs:{id:"setstate为什么要设计成异步的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#setstate为什么要设计成异步的"}},[e._v("#")]),e._v(" setState为什么要设计成异步的")]),e._v(" "),v("ul",[v("li",[e._v("保持内部的一致性，即使"),v("code",[e._v("state")]),e._v("是同步更新，"),v("code",[e._v("props")]),e._v("也不是")]),e._v(" "),v("li",[e._v("将"),v("code",[e._v("state")]),e._v("的更新延缓到最后批量合并更新再去渲染对于应用的性能优化是有极大的好处，如果每次的状态都去重新渲染真实的"),v("code",[e._v("DOM")]),e._v(",那么它将带来巨大的性能消耗。")])]),e._v(" "),v("h2",{attrs:{id:"setstate异步设计原理及应用场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#setstate异步设计原理及应用场景"}},[e._v("#")]),e._v(" setState异步设计原理及应用场景")]),e._v(" "),v("p",[e._v("异步的作用是提高性能，降低冗余。简单的说，因为"),v("code",[e._v("state")]),e._v("具有更新队列，将所有的更新都累计到最后进行批量合并再去渲染可以极大提高应用的性能。"),v("code",[e._v("React")]),e._v("为了解决跨平台问题，在"),v("code",[e._v("JSX")]),e._v("中封装了一套事件机制，代理了原生的事件，像在"),v("code",[e._v("JSX")]),e._v("的"),v("code",[e._v("render")]),e._v("方法中返回的"),v("code",[e._v("dom")]),e._v("中添加的"),v("code",[e._v("onClick")]),e._v(","),v("code",[e._v("onFocus")]),e._v("等方法都是合成事件，所以"),v("strong",[e._v("setState并不是真正意义的异步操作，仅仅只是模拟了异步行为")]),e._v("，实现是通过"),v("code",[e._v("isBatchingUpdates")]),e._v("来判断是先存进"),v("code",[e._v("state队列")]),e._v("还是直接更新，为"),v("code",[e._v("true")]),e._v("则执行异步操作，"),v("code",[e._v("false")]),e._v("则直接更新,典型的例子为使用"),v("code",[e._v("setTimeout")]),e._v("定时器更新时，则直接使用同步操作，")]),e._v(" "),v("h2",{attrs:{id:"setstate总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#setstate总结"}},[e._v("#")]),e._v(" setState总结")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("setState")]),e._v("只在合成事件和钩子函数中是"),v("strong",[e._v("异步")]),e._v("的，在原生事件和"),v("code",[e._v("setTimeout")]),e._v("中都是同步的")]),e._v(" "),v("li",[v("code",[e._v("setState")]),e._v("的“异步”并不是说内部由异步代码实现，其实本身执行的过程和代码都是同步的，只是合成事件和钩子函数的调用顺序在更新执行之前，导致在合成事件和钩子函数中无法立即得到更新的值，形成了所谓的“异步”，当然可以通过第二个参数"),v("code",[e._v("setState(particalState,callback)")]),e._v("中的callback拿到更新后的结果。")]),e._v(" "),v("li",[v("code",[e._v("setState")]),e._v("的批量更新操作也是建立在“异步”(合成事件，钩子函数)之上的，在原生事件和"),v("code",[e._v("setTimeout")]),e._v("中不会批量更新，在“异步”中如果对同一个值进行多次"),v("code",[e._v("setState")]),e._v(","),v("code",[e._v("setState")]),e._v("的批量更新策略会对齐进行覆盖，去最后一次的执行，如果是同时"),v("code",[e._v("setState")]),e._v("多个不同的值，在更新时会对其进行合并批量更新。")])]),e._v(" "),v("h2",{attrs:{id:"什么是受控组件和非受控组件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是受控组件和非受控组件"}},[e._v("#")]),e._v(" 什么是受控组件和非受控组件")]),e._v(" "),v("p",[e._v("受控组件和非受控组件通常指的是"),v("code",[e._v("form")]),e._v("表单中的组件元素，就形式上来说，受控组件就是为某个"),v("code",[e._v("form")]),e._v("表单组件添加"),v("code",[e._v("value")]),e._v("属性；非受控组件就是没有添加"),v("code",[e._v("value")]),e._v("属性的组件；")]),e._v(" "),v("ul",[v("li",[e._v("受控组件：通过使用组件的"),v("code",[e._v("onChange")]),e._v("事件改变表单元素的"),v("code",[e._v("value")]),e._v(",受控组件的优势在于，可以非常容易实现对用户的输入验证，或者对用户交互做拦截处理。")]),e._v(" "),v("li",[e._v("非受控组件: 非受控组件相对于普通的"),v("code",[e._v("React")]),e._v("组件或者"),v("code",[e._v("受控组件")]),e._v("来说是一种反模式，"),v("code",[e._v("非受控组件")]),e._v("不受"),v("code",[e._v("React")]),e._v("的状态控制("),v("code",[e._v("state或props")]),e._v(")，非受控组件一般没什么用途，其值并非受父组件控制，它的值受其自身控制，但是，我们可以对其添加一个"),v("code",[e._v("ref")]),e._v("属性，这样可以获得"),v("code",[e._v("非受控组件")]),e._v("渲染后底层"),v("code",[e._v("DOM")]),e._v("元素的访问。")]),e._v(" "),v("li",[v("code",[e._v("React")]),e._v("组件应当只接受状态的改变而改变，虽然使用"),v("code",[e._v("受控组件")]),e._v("在代码量上有所增加，但推荐使用"),v("code",[e._v("受控组件")]),e._v(","),v("code",[e._v("受控组件")]),e._v("的状态由"),v("code",[e._v("React")]),e._v("控制，可以更好的控制数据流，在用户输入时更够更新组件状态。")])])])}),[],!1,null,null,null);t.default=a.exports}}]);