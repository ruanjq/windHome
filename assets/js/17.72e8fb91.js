(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{184:function(t,s,a){"use strict";a.r(s);var e=a(2),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"浏览器的缓存原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的缓存原理"}},[t._v("#")]),t._v(" 浏览器的缓存原理")]),t._v(" "),a("h2",{attrs:{id:"什么是缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是缓存"}},[t._v("#")]),t._v(" 什么是缓存")]),t._v(" "),a("p",[t._v("浏览器的缓存：简单来说就是将已经请求下载过的资源文件备份一份到客户端本地，当再次请求资源的时候从客户端本地读取，不再通过网络请求服务端获取。")]),t._v(" "),a("h2",{attrs:{id:"缓存的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存的作用"}},[t._v("#")]),t._v(" 缓存的作用")]),t._v(" "),a("ul",[a("li",[t._v("减少网络传输的损耗")]),t._v(" "),a("li",[t._v("降低服务器压力")]),t._v(" "),a("li",[t._v("提升客户端用户体验")])]),t._v(" "),a("h2",{attrs:{id:"常见的缓存方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见的缓存方式"}},[t._v("#")]),t._v(" 常见的缓存方式")]),t._v(" "),a("p",[a("strong",[t._v("常见的浏览器缓存方式")])]),t._v(" "),a("ul",[a("li",[t._v("Service Worker")]),t._v(" "),a("li",[t._v("Memory Cache")]),t._v(" "),a("li",[t._v("Disk Cache")]),t._v(" "),a("li",[t._v("Push Cache")])]),t._v(" "),a("h3",{attrs:{id:"service-worker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#service-worker"}},[t._v("#")]),t._v(" Service Worker")]),t._v(" "),a("p",[a("code",[t._v("Services Work")]),t._v(" 是"),a("code",[t._v("HTML5")]),t._v(" 的一个API 标准，它独立运行于浏览器的一个单一线程，主要用来做持久的离线缓存，可以处理客户端与服务端的请求的代理拦截。\njs 多线程还有一项技术 WebWorker,它和WebWork 相比")]),t._v(" "),a("p",[a("strong",[t._v("相同点")])]),t._v(" "),a("ul",[a("li",[t._v("独立于JS主线程的运行环境")]),t._v(" "),a("li",[t._v("无法操作DOM, 通过"),a("code",[t._v("postMessage")]),t._v(" 接口江数据发送给js主线程")]),t._v(" "),a("li",[t._v("不会阻塞 JS 主线程的代码运行")])]),t._v(" "),a("p",[a("strong",[t._v("区别点")])]),t._v(" "),a("ul",[a("li",[t._v("Service Worker 是浏览器中的一个进程，而不是线程，它存在于浏览器全局运行环境中")]),t._v(" "),a("li",[a("code",[t._v("Service Worker")]),t._v(" 是一项持久化的技术,只要不清空浏览器缓存,"),a("code",[t._v("Service Worker")]),t._v(" 缓存就不会被销毁")]),t._v(" "),a("li",[a("code",[t._v("Web Worker")]),t._v(" 是临时的,页面刷新线程内的操作就会被销毁，又得重新执行一遍")]),t._v(" "),a("li",[t._v("出于安全考虑, "),a("code",[t._v("Service Worker")]),t._v(" 只能运行与localhost 或者HTTPS 的环境")]),t._v(" "),a("li",[a("code",[t._v("Service Worker")]),t._v(" 内部API大都采用 "),a("code",[t._v("Promise")]),t._v(" 封装的")])]),t._v(" "),a("p",[a("strong",[t._v("使用方式")])]),t._v(" "),a("ul",[a("li",[t._v("注册 sw.js 文件")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'serviceWorker'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("navigator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    navigator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("serviceWorker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("register")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./sw.js"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("scope"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("registration")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("页面通信")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// sw.js")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"message"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"this message is from sw.js,to page"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// index.js")]),t._v("\nnavigator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("serviceWorker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"message"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this message is from sw.js,to page")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"memory-cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memory-cache"}},[t._v("#")]),t._v(" Memory Cache")]),t._v(" "),a("p",[a("code",[t._v("Memory Cache")]),t._v(" 表示内存中的缓存，其特点是"),a("code",[t._v("容量小,读取高效,持续性短")]),t._v(",会随着进程释放而释放.所以在内存使用率低，缓存小尺寸资源时候,会优先以"),a("code",[t._v("Memory Cache")]),t._v(" 为有限，否则使用"),a("code",[t._v("Disk Cache")])]),t._v(" "),a("h3",{attrs:{id:"disk-cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#disk-cache"}},[t._v("#")]),t._v(" Disk Cache")]),t._v(" "),a("p",[a("code",[t._v("Disk Cache")]),t._v(" 即磁盘中的缓存，特点是"),a("code",[t._v("容量大,读取缓慢，持续性长")])]),t._v(" "),a("h3",{attrs:{id:"push-cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#push-cache"}},[t._v("#")]),t._v(" Push Cache")]),t._v(" "),a("p",[a("code",[t._v("Push Cache")]),t._v(" 是HTTP2.0中的内容,缓存时间也很短暂,只在会话(Session)中存在，一旦会话结束就会被释放。")]),t._v(" "),a("h2",{attrs:{id:"缓存策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存策略"}},[t._v("#")]),t._v(" 缓存策略")]),t._v(" "),a("p",[t._v("浏览器每次向服务器发起"),a("code",[t._v("HTTP")]),t._v("请求获得资源后,会根据不同情况(Service Worker、Push Cache 、HTTP Header 的缓存标识字段) 将资源缓存起来。\n浏览器缓存策略分为"),a("code",[t._v("强制缓存")]),t._v("和"),a("code",[t._v("协商缓存")]),t._v(",通过设置HTTP Header 来实现。")]),t._v(" "),a("h3",{attrs:{id:"强制缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强制缓存"}},[t._v("#")]),t._v(" 强制缓存")]),t._v(" "),a("p",[t._v("当浏览器发起 "),a("code",[t._v("HTTP")]),t._v(" 请求时,会依次查找上述缓存位置中是否存在缓存资源并通过缓存标识字段"),a("code",[t._v("Expires")]),t._v("或"),a("code",[t._v("Cache-Control")]),t._v(" 来验证缓存资源是否过期.")]),t._v(" "),a("ul",[a("li",[t._v("Expires 是服务端在响应请求时候规定资源的失效时间")]),t._v(" "),a("li",[t._v("Cache-Control 表示服务端在响应请求时候规定资源是否需要被缓存以及缓存的有效时间。\n"),a("img",{attrs:{src:"/images/front/cache1.png",alt:"浏览器缓存策略",title:"浏览器缓存策略"}})])]),t._v(" "),a("p",[a("strong",[t._v("Cache-Control 主要参数如下")]),t._v(" "),a("img",{attrs:{src:"/images/front/cache2.png",alt:"浏览器缓存策略",title:"浏览器缓存策略"}})]),t._v(" "),a("p",[a("strong",[t._v("Cache-Control 和 Expires 的区别")])]),t._v(" "),a("ul",[a("li",[t._v("Expires 是HTTP1.0的字段,Cache-Control 是HTTP1.1的字段")]),t._v(" "),a("li",[t._v("Cache-Control 优先级高于Expires，单位为秒")])]),t._v(" "),a("div",{staticClass:"custom-block danger"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("若是命中缓存(即存在缓存资源并且缓存未过期),则浏览器响应状态码为200时候,直接使用缓存资源作为返回结果,不在发起HTTP 请求,若存在缓存资源并且缓存已过期,则进入"),a("code",[t._v("协商缓存")])])]),t._v(" "),a("h3",{attrs:{id:"协商缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[t._v("#")]),t._v(" 协商缓存")]),t._v(" "),a("p",[t._v("协商缓存采用HTTP Header中的 "),a("code",[t._v("Last-Modified")]),t._v(" 和 "),a("code",[t._v("Etag")]),t._v(" 字段控制")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/front/cache3.png",alt:"浏览器缓存策略",title:"浏览器缓存策略"}})]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("Last-Modified")]),t._v(" 是服务端响应请求时用来说明资源的最后修改时间，与之对应的是"),a("code",[t._v("If-Modified-Since")]),t._v("字段，在协商缓存过程中,HTTP 请求Header 中会带上"),a("code",[t._v("If—Modified-Since")]),t._v(" 字段,值为"),a("code",[t._v("Last-Modified")]),t._v("。")])]),t._v(" "),a("li",[a("p",[t._v("当服务端接受到带有"),a("code",[t._v("If-Modified-Since")]),t._v(",会将"),a("code",[t._v("If-Modified-Since")]),t._v("的值与请求资源的最后修改时间做对比,如果相同，则说明资源没有被修改，此时 HTTP 响应给客户端的状态码 "),a("code",[t._v("HTTP Status Code 304(Not Modified)")]),t._v(",浏览器继续使用缓存资源,如果最后修改时间比较新,则返回最新修改的资源,响应状态码 "),a("code",[t._v("HTTP Status Code 200")]),t._v(" 更新"),a("code",[t._v("Last-Modified")]),t._v(" 的值")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Etag")]),t._v(" 是服务端在响应请求时用来说明资源的唯一标识。与之对应的是"),a("code",[t._v("If-None—Match")]),t._v("字段，在协商缓存中,浏览器发送HTTP 请求Header 中会带上"),a("code",[t._v("If-None-Match")]),t._v(" 字段，值为 "),a("code",[t._v("Etag")]),t._v("属性的值")])]),t._v(" "),a("li",[a("p",[t._v("当服务端接受到带有 "),a("code",[t._v("If-None-Match")]),t._v(" 字段的值,会将值与请求对应的资源唯一标识对比，如果结果相同,说明资源没有新的修改,则返回 "),a("code",[t._v("HTTP Status Code 304")]),t._v(",浏览器继续使用缓存资源,如果不相同,则说明被修改, "),a("code",[t._v("HTTP Status Code 200")]),t._v(",返回最新资源, 更新"),a("code",[t._v("Etag")]),t._v(" 的值。")])])]),t._v(" "),a("p",[a("strong",[t._v("Last-Modified 和 Etag 的区别")])]),t._v(" "),a("ul",[a("li",[t._v("Last-Modified 属于HTTP1.0的字段,而Etag是HTTP1.1的字段")]),t._v(" "),a("li",[t._v("当 Last-Modified 和 Etag 同时存在时,Etag 的优先级要高于 Last-Modified")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[a("strong",[t._v("Etag 的出现主要是为了解决Last-Modified 存在的问题")])]),t._v(" "),a("ul",[a("li",[t._v("Last-Modified 标注的修改时间只能精确到秒,如果文件在1s中修改多次，它将不能准确标注文件的最后修改时间")]),t._v(" "),a("li",[t._v("如果打开本地缓存文件,即时没有对文件进行修改,但是Last-Modified却改变了，导致文件无法使用缓存")])])]),t._v(" "),a("h2",{attrs:{id:"流程图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#流程图"}},[t._v("#")]),t._v(" 流程图")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/front/cache4.png",alt:"浏览器缓存策略",title:"浏览器缓存策略"}})]),t._v(" "),a("h2",{attrs:{id:"解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[t._v("#")]),t._v(" 解决方案")]),t._v(" "),a("ul",[a("li",[t._v("1：使用构建工具(webpack、gulp)在静态资源路径后面添加版本标识参数：如 xxx/dist/index.js?v=34n45js9")]),t._v(" "),a("li",[t._v("2: 使用构建工具打包的时候将文件名以hash值方式命名，如果文件名有修改，打包编译后文件名每次都会修改")])])])}),[],!1,null,null,null);s.default=n.exports}}]);