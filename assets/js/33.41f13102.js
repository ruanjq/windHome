(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{246:function(t,e,v){"use strict";v.r(e);var _=v(2),a=Object(_.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"react-面试题-一"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#react-面试题-一"}},[t._v("#")]),t._v(" React 面试题(一)")]),t._v(" "),v("h2",{attrs:{id:"setstate为什么要设计成异步的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#setstate为什么要设计成异步的"}},[t._v("#")]),t._v(" setState为什么要设计成异步的")]),t._v(" "),v("ul",[v("li",[t._v("保持内部的一致性，即使"),v("code",[t._v("state")]),t._v("是同步更新，"),v("code",[t._v("props")]),t._v("也不是")]),t._v(" "),v("li",[t._v("将"),v("code",[t._v("state")]),t._v("的更新延缓到最后批量合并更新再去渲染对于应用的性能优化是有极大的好处，如果每次的状态都去重新渲染真实的"),v("code",[t._v("DOM")]),t._v(",那么它将带来巨大的性能消耗。")])]),t._v(" "),v("h2",{attrs:{id:"setstate异步设计原理及应用场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#setstate异步设计原理及应用场景"}},[t._v("#")]),t._v(" setState异步设计原理及应用场景")]),t._v(" "),v("p",[t._v("异步的作用是提高性能，降低冗余。简单的说，因为"),v("code",[t._v("state")]),t._v("具有更新队列，将所有的更新都累计到最后进行批量合并再去渲染可以极大提高应用的性能。"),v("code",[t._v("React")]),t._v("为了解决跨平台问题，在"),v("code",[t._v("JSX")]),t._v("中封装了一套事件机制，代理了原生的事件，像在"),v("code",[t._v("JSX")]),t._v("的"),v("code",[t._v("render")]),t._v("方法中返回的"),v("code",[t._v("dom")]),t._v("中添加的"),v("code",[t._v("onClick")]),t._v(","),v("code",[t._v("onFocus")]),t._v("等方法都是合成事件，所以"),v("strong",[t._v("setState并不是真正意义的异步操作，仅仅只是模拟了异步行为")]),t._v("，实现是通过"),v("code",[t._v("isBatchingUpdates")]),t._v("来判断是先存进"),v("code",[t._v("state队列")]),t._v("还是直接更新，为"),v("code",[t._v("true")]),t._v("则执行异步操作，"),v("code",[t._v("false")]),t._v("则直接更新,典型的例子为使用"),v("code",[t._v("setTimeout")]),t._v("定时器更新时，则直接使用同步操作，")]),t._v(" "),v("h2",{attrs:{id:"setstate总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#setstate总结"}},[t._v("#")]),t._v(" setState总结")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("setState")]),t._v("只在合成事件和钩子函数中是"),v("strong",[t._v("异步")]),t._v("的，在原生事件和"),v("code",[t._v("setTimeout")]),t._v("中都是同步的")]),t._v(" "),v("li",[v("code",[t._v("setState")]),t._v("的“异步”并不是说内部由异步代码实现，其实本身执行的过程和代码都是同步的，只是合成事件和钩子函数的调用顺序在更新执行之前，导致在合成事件和钩子函数中无法立即得到更新的值，形成了所谓的“异步”，当然可以通过第二个参数"),v("code",[t._v("setState(particalState,callback)")]),t._v("中的callback拿到更新后的结果。")]),t._v(" "),v("li",[v("code",[t._v("setState")]),t._v("的批量更新操作也是建立在“异步”(合成事件，钩子函数)之上的，在原生事件和"),v("code",[t._v("setTimeout")]),t._v("中不会批量更新，在“异步”中如果对同一个值进行多次"),v("code",[t._v("setState")]),t._v(","),v("code",[t._v("setState")]),t._v("的批量更新策略会对齐进行覆盖，去最后一次的执行，如果是同时"),v("code",[t._v("setState")]),t._v("多个不同的值，在更新时会对其进行合并批量更新。")])])])}),[],!1,null,null,null);e.default=a.exports}}]);