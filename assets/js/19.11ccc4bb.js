(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{236:function(t,a,s){"use strict";s.r(a);var e=s(2),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"前端常见的面试题-二"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前端常见的面试题-二"}},[t._v("#")]),t._v(" 前端常见的面试题(二)")]),t._v(" "),s("h2",{attrs:{id:"实现一个极简的模板引擎"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现一个极简的模板引擎"}},[t._v("#")]),t._v(" 实现一个极简的模板引擎")]),t._v(" "),s("p",[t._v("实现render函数,返回符合预期")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我是{{name}},年龄{{age}}"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Beliver"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出 我是Believer,年龄18")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 思路,使用正则表达式匹配,正则表达式默认使是贪婪模式,如果实现惰性匹配,则需要在量词后面添加?符号即可")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果使用了贪婪模式,会匹配到最后一个}}，而不是第一个结束的}}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("tpl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" tpl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\{\\{(.+?)\\}\\}/g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("$"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("$"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// $1 表示匹配的字符结果,$2 表示匹配括号内的关键词")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("$"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"浏览器eventloop-和-node-js-中的事件循环有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器eventloop-和-node-js-中的事件循环有什么区别"}},[t._v("#")]),t._v(" 浏览器Eventloop 和 Node.js 中的事件循环有什么区别")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("浏览器的事件循环机制是基于HTML5 规范，Node.js 事件循环是基于 libuv 库实现的")])]),t._v(" "),s("li",[s("p",[t._v("Node.js 事件循环有6个阶段，分别为,"),s("code",[t._v("timers")]),t._v("、"),s("code",[t._v("I/O callbacks")]),t._v("、"),s("code",[t._v("idle")]),t._v("、"),s("code",[t._v("perpare")]),t._v("、"),s("code",[t._v("poll 轮询")]),t._v("、"),s("code",[t._v("check")]),t._v("、"),s("code",[t._v("close callbacks")])])]),t._v(" "),s("li",[s("p",[t._v("相比浏览器,"),s("code",[t._v("Node.js")]),t._v(" 多了 "),s("code",[t._v("setImmediate(宏任务)")]),t._v(" 和 "),s("code",[t._v("process.nextTick(微任务这两种异步操作)")])])]),t._v(" "),s("li",[s("p",[t._v("在浏览器中,"),s("code",[t._v("微任务队列")]),t._v("是在每个"),s("code",[t._v("宏任务")]),t._v("执行完成之后执行，而在Node.js 中,"),s("code",[t._v("微任务")]),t._v("在事件循环的各个阶段之间执行,也就是一个阶段执行完毕，就会去执行微任务队列")])])]),t._v(" "),s("h2",{attrs:{id:"网络协议分层模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网络协议分层模型"}},[t._v("#")]),t._v(" 网络协议分层模型")]),t._v(" "),s("ul",[s("li",[t._v("OSI 7层模型: (应用层，表示层，会话层，传输层，网络层，数据链路层，物理层)")]),t._v(" "),s("li",[t._v("TCP/IP 4层模型：（应用层，传输层，网络层，数据链路层）")])]),t._v(" "),s("h2",{attrs:{id:"tcp-特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp-特性"}},[t._v("#")]),t._v(" TCP 特性")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("TCP")]),t._v(" 提供一种面向连接的，可靠的字节流服务")]),t._v(" "),s("li",[t._v("在一个"),s("code",[t._v("TCP")]),t._v("连接中,仅有两方进行彼此通信，广播和多播不能用于TCP")]),t._v(" "),s("li",[t._v("TCP 并不能保证数据一定会被对方接受到")])]),t._v(" "),s("h2",{attrs:{id:"tcp-ip-三次握手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp-ip-三次握手"}},[t._v("#")]),t._v(" TCP/IP 三次握手")]),t._v(" "),s("p",[t._v("所谓三次握手"),s("code",[t._v("(Three-way Handshake)")]),t._v("是指建立一个TCP连接时，需要客户端和服务端总共发送3个包。")]),t._v(" "),s("p",[t._v("【三次握手的目的】")]),t._v(" "),s("ul",[s("li",[t._v("确认客户端和服务端,接受数据和发送数据的能力是否正常")]),t._v(" "),s("li",[t._v("指定自己的初始化序列号,为后面的可靠传送做准备")]),t._v(" "),s("li",[t._v("如果是HTTPS协议的话,三次握手过程海慧进行数字证书的校验以及加密密钥的生成。")])]),t._v(" "),s("p",[t._v("【三次握手流程】")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("第一次握手: 客户端给服务端发送一个"),s("code",[t._v("SYN")]),t._v("报文,并指明客户端的初始化序列号(ISN). 此时客户端处于"),s("code",[t._v("SYN_SEND")]),t._v("状态.（Synchronize Sequence Numbers）")])]),t._v(" "),s("li",[s("p",[t._v("第二次握手：服务端收到"),s("code",[t._v("SYN")]),t._v("报文之后,会以自己的"),s("code",[t._v("SYN")]),t._v("作为应答，并指定自己的初始化序列号ISN,同时会把客户端的"),s("code",[t._v("ISN+1")]),t._v("作为"),s("code",[t._v("ACK")]),t._v("的值，表示已经收到了客户端的"),s("code",[t._v("SYN")]),t._v("，此时服务器处于"),s("code",[t._v("SYN_REVD")]),t._v("的状态")])]),t._v(" "),s("li",[s("p",[t._v("第三次握手,客户端收到"),s("code",[t._v("SYN")]),t._v("报文后,会发送一个"),s("code",[t._v("ACK")]),t._v("报文,当然,也是一样把服务器的"),s("code",[t._v("ISN+1")]),t._v("作为"),s("code",[t._v("ACK")]),t._v("的值，表示已经收到了服务端的"),s("code",[t._v("SYN")]),t._v("报文,此时客户端处于"),s("code",[t._v("ESTABLISHED")]),t._v(" 状态")])]),t._v(" "),s("li",[s("p",[t._v("服务器收到ACK 报文之后,也处于"),s("code",[t._v("ESTABLISHED")]),t._v(" 状态，此时，双方建立链接，TCP握手结束")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/HIT-Alibaba/interview/master/img/tcp-connection-made-three-way-handshake.png",alt:"三次握手流程",title:"三次握手流程"}})])])}),[],!1,null,null,null);a.default=n.exports}}]);