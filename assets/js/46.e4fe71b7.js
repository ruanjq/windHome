(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{163:function(e,v,_){"use strict";_.r(v);var t=_(2),r=Object(t.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("p"),_("div",{staticClass:"table-of-contents"},[_("ul",[_("li",[_("a",{attrs:{href:"#什么是bff"}},[e._v("什么是BFF")])]),_("li",[_("a",{attrs:{href:"#bff优势与劣势"}},[e._v("BFF优势与劣势")]),_("ul",[_("li",[_("a",{attrs:{href:"#优势"}},[e._v("优势")])]),_("li",[_("a",{attrs:{href:"#劣势"}},[e._v("劣势")])])])]),_("li",[_("a",{attrs:{href:"#bff技术栈"}},[e._v("BFF技术栈")])])])]),_("p"),e._v(" "),_("h1",{attrs:{id:"前端bff框架"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#前端bff框架"}},[e._v("#")]),e._v(" 前端BFF框架")]),e._v(" "),_("h2",{attrs:{id:"什么是bff"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是bff"}},[e._v("#")]),e._v(" 什么是BFF")]),e._v(" "),_("p",[_("code",[e._v("BFF BackEnds For Frontends")]),e._v("(服务于后端的前端)单词的缩写,主要用于服务前端的后端应用程序,来解决多终端业务耦合问题。适用于目前比较流行的"),_("code",[e._v("中台化")]),e._v("，"),_("code",[e._v("微服务")]),e._v("项目场景，通过"),_("code",[e._v("BFF")]),e._v("层聚合"),_("code",[e._v("Service")]),e._v("接口，提供给不同终端调用。")]),e._v(" "),_("h2",{attrs:{id:"bff优势与劣势"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#bff优势与劣势"}},[e._v("#")]),e._v(" BFF优势与劣势")]),e._v(" "),_("h3",{attrs:{id:"优势"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#优势"}},[e._v("#")]),e._v(" 优势")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("数据服务")]),e._v("与"),_("code",[e._v("BFF")]),e._v("分离,降低了项目的复杂度,解耦了业务逻辑")]),e._v(" "),_("li",[e._v("前后端彻底分离，技术栈"),_("code",[e._v("Node.js")]),e._v("语言同一，支持多个终端业务场景")]),e._v(" "),_("li",[e._v("后端微服务架构专注服务场景设计，解耦业务逻辑代码")]),e._v(" "),_("li",[_("code",[e._v("BFF")]),e._v("，"),_("code",[e._v("微服务")]),e._v("独立部署运行，依赖性大大降低")]),e._v(" "),_("li",[e._v("减少了前端的"),_("code",[e._v("HTTP")]),e._v("请求数量")]),e._v(" "),_("li",[e._v("提高了前端岗位在项目开发中的角色地位，前端熟悉后端技术范围，熟悉项目业务。")]),e._v(" "),_("li",[e._v("解决前端"),_("code",[e._v("跨域")]),e._v("问题\n....")])]),e._v(" "),_("h3",{attrs:{id:"劣势"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#劣势"}},[e._v("#")]),e._v(" 劣势")]),e._v(" "),_("ul",[_("li",[e._v("对前端开发人员的职责要求更高了,增加了开发成本,"),_("code",[e._v("BFF项目")]),e._v(","),_("code",[e._v("前端项目")]),e._v(",都由前端开发人员编写")]),e._v(" "),_("li",[_("code",[e._v("BFF")]),e._v("层转发接口增加接口响应时间")]),e._v(" "),_("li",[_("code",[e._v("Error")]),e._v("排查复杂度增加了，涉及"),_("code",[e._v("BFF")]),e._v(","),_("code",[e._v("微服务")]),e._v("2个平台")]),e._v(" "),_("li",[e._v("业务异常处理需保持统一，统一格式化业务异常的返回内容，需要保证端到端测试")])]),e._v(" "),_("p",[e._v("对比优势和劣势的内容，总得来说，BFF框架还是客观的，很明显优势大于劣势。")]),e._v(" "),_("h2",{attrs:{id:"bff技术栈"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#bff技术栈"}},[e._v("#")]),e._v(" BFF技术栈")]),e._v(" "),_("p",[_("code",[e._v("Koa2")]),e._v("、"),_("code",[e._v("Typescript")]),e._v("、"),_("code",[e._v("Routing-controllers")]),e._v("、"),_("code",[e._v("Typedi")]),e._v("、"),_("code",[e._v("class-validator")]),e._v("、"),_("code",[e._v("grpc")]),e._v("、"),_("code",[e._v("Log4js")])]),e._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://koajs.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Koa"),_("OutboundLink")],1),e._v(" 基于"),_("code",[e._v("Node.js")]),e._v("封装的开源框架，能快速搭建Web应用程序，Koa2支持全新的ES规范("),_("code",[e._v("async")]),e._v(","),_("code",[e._v("await")]),e._v(")")]),e._v(" "),_("li",[_("a",{attrs:{href:"https://www.tslang.cn/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Typescript"),_("OutboundLink")],1),e._v(" 是"),_("code",[e._v("Javascript")]),e._v("类型的超集,支持类型校验，接口声明，泛型，Class扩展等多多种特性，弥补了"),_("code",[e._v("Javascript")]),e._v("的不足之处,它可以编译为纯的"),_("code",[e._v("Javascript")]),e._v(",可以在任何浏览器，任何计算机和任何操作系统运行，并且开源,前端圈流行一句话：“任何优秀的项目都可以用"),_("code",[e._v("Typescript")]),e._v("实现,任何能用"),_("code",[e._v("JavaScript")]),e._v("实现的应用，最终都会用"),_("code",[e._v("Typescript")]),e._v("实现。”")]),e._v(" "),_("li",[_("a",{attrs:{href:"https://www.npmjs.com/package/routing-controllers",target:"_blank",rel:"noopener noreferrer"}},[e._v("Routing-controllers"),_("OutboundLink")],1),e._v(" 基于"),_("code",[e._v("Node.js")]),e._v("封装的框架，处理路由和控制器的行为，通过装饰器特性更方便的进行路由配置，请求参数校验，中间件的处理，支持"),_("code",[e._v("express.js")]),e._v("和"),_("code",[e._v("koa.js")]),e._v(".")]),e._v(" "),_("li",[_("a",{attrs:{href:"https://www.npmjs.com/package/typedi",target:"_blank",rel:"noopener noreferrer"}},[e._v("typedi"),_("OutboundLink")],1),e._v(" 是一个"),_("code",[e._v("dependency injection")]),e._v("依赖注入的工具，类似比较成熟的"),_("code",[e._v("JAVA")]),e._v("中的依赖注入特性,将有依赖关系的类放到容器中,然后解析出类的实例，目的是实现类的解耦")]),e._v(" "),_("li",[_("a",{attrs:{href:"https://www.npmjs.com/package/class-validator",target:"_blank",rel:"noopener noreferrer"}},[e._v("class-validator"),_("OutboundLink")],1),e._v(" 对参数进行类型校验的工具库，通过装饰器模式的特性，能够高效的验证参数类型。")]),e._v(" "),_("li",[_("a",{attrs:{href:"https://grpc.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("grpc"),_("OutboundLink")],1),e._v("  gRPC是Google开源的一套现代高性能RPC框架,可以在任何环境中运行。它可以有效地连接服务和跨数据中心可插入支持负载平衡、跟踪、健康检查和验证。它也适用于最后一英里的分布式计算连接设备,移动应用程序和浏览器的后端服务。")]),e._v(" "),_("li",[_("a",{attrs:{href:""}},[e._v("Log4js")]),e._v(" "),_("code",[e._v("Javascript")]),e._v("的"),_("code",[e._v("Log")]),e._v("日志管理插件")])])])}),[],!1,null,null,null);v.default=r.exports}}]);